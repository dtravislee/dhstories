{{/* JSON TEMPLATE */}}
{{/* Used for JSON files, which are used for site search */}}

{{/* Variable declarations */}}

{{/* Paginator object */}}
{{- $paginator := (.Paginate (where (where .Site.RegularPages.Reverse `Params.hide` `=` nil) `Params.date` `!=` nil) .Site.Params.paginate) -}}
{{/* Array of posts */}}
{{- $posts := slice -}}
{{/* Tags for a given post */}}
{{- $tags := `` -}}

{{/* JSON populator */}}
{{/* Uses pagination to split JSON files per page */}}
{{/*	so that search functions needn't pull the entire site index just to get 10 results */}}

{{- range $paginator.Pages -}}
	{{/* Get tags for the post, if any exist, as a string */}}
	{{- with .Params.tags -}}
		{{- $tags = delimit . "; " | replaceRE `{` "&lbrace;" | replaceRE `}` "&rbrace;" -}}
	{{- else -}}
		{{- $tags = `` -}}
	{{- end -}}
	{{- $item := dict
		"title" (.Title | replaceRE `{` "&lbrace;" | replaceRE `}` "&rbrace;")
		"day" (.Date.Format (`02`))
		"month" (.Date.Format (`01`))
		"year" (.Date.Format (`2006`))
		"date" (.Date.Format (`January 02, 2006`))
		"edited" (.Lastmod.Format (`January 02, 2006`))
		"url" .RelPermalink
		"content" (.Plain | replaceRE `{` "&lbrace;" | replaceRE `}` "&rbrace;")
		"tags" $tags
		"description" (.Description | replaceRE `{` "&lbrace;" | replaceRE `}` "&rbrace;")
		"readtime" (string .ReadingTime)
		"words" (string .FuzzyWordCount ) -}}
	{{- $posts = $posts | append $item -}}
{{- end -}}

{{/* Finally, run the whole gamut through the jsonify method */}}
{{- $posts | jsonify -}}